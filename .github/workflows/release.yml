# .github/workflows/release.yml
name: Release by tag  # Nom du workflow affiché dans GitHub Actions
on:
  push:
    tags:
      - 'v*.*.*'  # Déclenche le workflow uniquement lorsqu'un tag SemVer (ex: v1.0.0) est poussé

permissions:
  contents: write  # Autorise le workflow à créer/modifier des releases et uploader des fichiers

env:
  DOTNET_VERSION: '6.0'
  
jobs:
  build:
    name: Build artifacts  # Nom du job qui construit les artefacts
    runs-on: ubuntu-latest  # Utilise un runner Linux
    steps:
      - uses: actions/checkout@v4  # Clone le dépôt
        with:
          fetch-depth: 0  # Récupère tout l'historique (nécessaire pour les tags)
      - uses: actions/setup-dotnet@v4  # Installe .NET SDK
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }} 
      - name: Build
        run: |  # Commandes pour restaurer, compiler et publier l'application
          dotnet restore
          dotnet build -c Release --no-restore
          dotnet publish -c Release -o out/
      - name: Archive
        run: |  # Crée une archive tar.gz avec les fichiers publiés
          tar -czf artifact-${{ github.ref_name }}.tgz out/
      - name: Upload artifact
        uses: actions/upload-artifact@v4  # Sauvegarde l'artefact pour le job suivant
        with:
          name: release-artifact
          path: artifact-*.tgz

  create_release:
    name: Create GitHub Release  # Job qui crée la release GitHub
    runs-on: ubuntu-latest
    needs: [ build ]  # Attend que le job "build" soit terminé
    steps:
      - name: Download artifact
        uses: actions/download-artifact@v4  # Télécharge l'artefact généré
        with:
          name: release-artifact
          path: .
      - name: Determine release type by branch
        id: rel
        run: |
          BRANCH="${GITHUB_REF_NAME}" # Nom du tag (ex: v1.0.0)
          echo "branch_guess=${GITHUB_REF_NAME}" >> $GITHUB_OUTPUT
      - name: Set prerelease flags by branch
        id: flags
        run: |
          # Détermine si la release est draft ou prerelease selon la branche d'origine
          base_ref="$(git name-rev --name-only --exclude=tags/* $(git rev-list -n 1 $GITHUB_REF))"
          echo "base_ref=$base_ref"
          draft=false
          prerelease=false
          if [[ "$base_ref" == *develop* ]]; then draft=true; fi
          if [[ "$base_ref" == *recette* ]]; then prerelease=true; fi
          echo "draft=$draft" >> $GITHUB_OUTPUT
          echo "prerelease=$prerelease" >> $GITHUB_OUTPUT
      - name: Create release
        uses: softprops/action-gh-release@v2  # Action pour créer une release GitHub
        with:
          tag_name: ${{ github.ref_name }}  # Utilise le tag comme version
          name: Release ${{ github.ref_name }}  # Nom de la release
          draft: ${{ steps.flags.outputs.draft }}  # Draft si tag vient de develop
          prerelease: ${{ steps.flags.outputs.prerelease }}  # Pre-release si tag vient de recette
          files: |
            artifact-*.tgz  # Ajoute l'artefact à la release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Token pour authentifier l'action